; -*- mode: emacs-lisp; lexical-binding: t; no-byte-compile: t -*-

;; Be explicit about main file.
(setf eldev-project-main-file "init.el")



;; Emacs doesn't allow to add directory containing init.el to load
;; path, so we have to put other Emacs Lisp files in directory. Help
;; Eldev commands to locate them.
(eldev-add-loading-roots 'build "lisp")
(eldev-add-loading-roots 'lint "lisp")



;; Use MELPA unstable do download development dependencies.
(eldev-use-package-archive 'melpa-unstable)
(eldev-use-package-archive 'gnu)

;; These dependencies are needed for `init-elpa' module to work
;; properly when using compile command.
(eldev-add-extra-dependencies 'build 'use-package)
(eldev-add-extra-dependencies 'build 'quelpa)
(eldev-add-extra-dependencies 'build 'quelpa-use-package)
(eldev-add-extra-dependencies 'build 'auto-package-update)
(eldev-add-extra-dependencies 'build 'gnu-elpa-keyring-update)



(defvar elpa-upgrade-p nil)

(eldev-defoption elpa-bootstrap-upgrade-option ()
  "Upgrade all dependencies."
  :options (--upgrade)
  :for-command (bootstrap)
  (setf elpa-upgrade-p t))

(eldev-defcommand elpa-bootstrap (&rest parameters)
  "Install or upgrade project dependencies."
  (setq-default
   elpa-bootstrap-p t
   load-prefer-newer t)

  (when (getenv "CI")
    (setq-default package-check-signature nil))

  ;; Since we might be running in CI or other environments, stick to
  ;; XDG_CONFIG_HOME value if possible.
  (load (expand-file-name
         "init.el"
         (if-let ((xdg (getenv "XDG_CONFIG_HOME")))
             (expand-file-name "emacs/" xdg)
           user-emacs-directory)))

  (when elpa-upgrade-p
    (eldev-load-project-dependencies)
    (auto-package-update-now)
    (quelpa-upgrade-all)))



;; We want to generate autoloads file. This line simply loads few
;; helpers.
(eldev-use-plugin 'autoloads)

;; Eldev doesn't traverse extra loading roots, so we have to modify
;; autoloads plugin a little bit. Basically, this modification
;; achieves specific goal - generate autoloads from files located in
;; Lisp directory.
(eldev-defbuilder eldev-builder-autoloads (sources target)
  :type           many-to-one
  :short-name     "AUTOLOADS"
  :message        target
  :source-files   (:and "lisp/*.el" (:not ("lisp/*autoloads.el")))
  :targets        (lambda (_sources) "lisp/init-autoloads.el")
  :define-cleaner (eldev-cleaner-autoloads
                   "Delete the generated package autoloads files."
                   :default t)
  :collect        (":autoloads")
  ;; To make sure that `update-directory-autoloads' doesn't grab files it shouldn't,
  ;; override `directory-files' temporarily.
  (eldev-advised (#'directory-files
                  :around
                  (lambda (original directory &rest arguments)
                    (let ((files (apply original directory arguments)))
                      (if (file-equal-p directory eldev-project-dir)
                          (let (filtered)
                            (dolist (file files)
                              (when (eldev-any-p (file-equal-p file it) sources)
                                (push file filtered)))
                            (nreverse filtered))
                        files))))
    (let ((inhibit-message   t)
          (make-backup-files nil)
          (pkg-dir (expand-file-name "lisp/" eldev-project-dir)))
      (package-generate-autoloads (package-desc-name (eldev-package-descriptor)) pkg-dir)
      ;; Always load the generated file.  Maybe there are cases when we don't need that,
      ;; but most of the time we do.
      (eldev--load-autoloads-file (expand-file-name target eldev-project-dir)))))



;; Always   load autoloads file.
(add-hook
 'eldev-compile-hook
 (lambda ()
   (eldev--load-autoloads-file
    (expand-file-name "lisp/init-autoloads.el" eldev-project-dir))))



;; Tell checkdoc not to demand two spaces after a period.
(setq sentence-end-double-space nil)

(defun eldev-lint-find-files-absolute (f &rest args)
  "Call F with ARGS and ensure that result is absolute paths."
  (seq-map (lambda (p)
             (expand-file-name p eldev-project-dir))
           (seq-filter (lambda (p)
                         (not (string-suffix-p "autoloads.el" p)))
                       (apply f args))))

(advice-add 'eldev-lint-find-files :around #'eldev-lint-find-files-absolute)

;; Use elisp-lint by default
(setf eldev-lint-default '(elisp))
(with-eval-after-load 'elisp-lint
  (setf elisp-lint-ignored-validators '("byte-compile")))

;; In general, `package-lint' is useful. But package prefix naming
;; policy is not useful for personal configurations. So we chop
;; lib/init part from the package name.
(with-eval-after-load 'package-lint
  (defun package-lint--package-prefix-cleanup (f &rest args)
    "Call F with ARGS and cleanup it's result."
    (let ((r (apply f args)))
      (replace-regexp-in-string "\\(init\\|lib\\|config\\)-" "" r)))
  (advice-add 'package-lint--get-package-prefix :around #'package-lint--package-prefix-cleanup))

;; Teach linter how to properly indent emacsql vectors.
(eldev-add-extra-dependencies 'lint 'emacsql)
(add-hook 'eldev-lint-hook
          (lambda ()
            (eldev-load-project-dependencies 'lint nil t)
            (require 'emacsql)
            (call-interactively #'emacsql-fix-vector-indentation)))


