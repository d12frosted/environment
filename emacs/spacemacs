;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   dotspacemacs-configuration-layer-path `(,d12/env-spacemacs-directory)
   dotspacemacs-configuration-layers
   '(;; utilities
     better-defaults
     (git :variables
          git-magit-status-fullscreen t)
     github
     version-control
     syntax-checking
     spell-checking
     (auto-completion :disabled-for org)
     (org :variables
          org-enable-github-support t
          org-bullets-bullet-list '("◉" "○" "✿" "❀" "✸"))
     restclient
     (shell :variables
            shell-default-term-shell "/usr/local/bin/fish")
     eyebrowse
     perspectives
     pandoc
     colors

     ;; private layers
     no-dots
     (d12frosted :variables
                 d12/org-home-path (concat d12/dropbox-path "org/")
                 d12/org-author-name "Boris Buliga"
                 d12/org-author-email "d12frosted@icloud.com"
                 d12/org-agenda-ignore-dirs '(".git/"
                                              "technical/"
                                              "d12frosted/"
                                              "clips/"
                                              "journal/"
                                              "projects/"
                                              "personal/"))
     (d12-haskell :variables
              haskell-enable-hindent-style "chris-done"
              haskell-enable-shm-support t
              haskell-process-type 'stack-ghci
              haskell-tags-on-save nil
              haskell-process-log t
              haskell-process-reload-with-fbytecode nil
              haskell-process-use-presentation-mode t
              haskell-interactive-mode-include-file-name nil
              haskell-interactive-mode-eval-pretty nil
              haskell-process-suggest-haskell-docs-imports nil)

     ;; languages
     (csharp :variables
             omnisharp-server-executable-path "~/Developer/Other/omnisharp-roslyn/artifacts/build/omnisharp/omnisharp")
     emacs-lisp
     javascript
     lua
     markdown
     python
     ruby
     shell-scripts
     yaml)
   dotspacemacs-additional-packages '(comment-dwim-2
                                      color-theme-sanityinc-tomorrow
                                      apropospriate-theme
                                      vimish-fold)
   dotspacemacs-excluded-packages '()
   dotspacemacs-delete-orphan-packages nil))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."

  (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
    (normal-top-level-add-subdirs-to-load-path))

  (setq-default
   d12/env-directory (concat user-home-directory ".environment/")
   d12/env-spacemacs-directory (concat d12/env-directory "emacs/")
   d12/dropbox-path (concat user-home-directory "Dropbox/")

   dotspacemacs-editing-style 'emacs
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner (concat d12/env-spacemacs-directory "animacs-banner.png")
   dotspacemacs-startup-lists '(recents projects bookmarks)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Source Code Pro"
                               ;; "M+ 1m" ; http://mplus-fonts.osdn.jp/mplus-outline-fonts/index-en.html
                               ;; "Fira Mono"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-command-key ":"
   dotspacemacs-use-ido nil
   dotspacemacs-enable-paste-micro-state t
   dotspacemacs-guide-key-delay 0.4
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup t
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-mode-line-unicode-symbols nil
   dotspacemacs-smooth-scrolling t
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   spacemacs-mode-line-org-clock-current-taskp t
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-which-key-position 'bottom)

  ;; rename title in init screen
  (defadvice spacemacs-buffer//insert-image-banner (after d12//spacemacs-title-advice activate)
    "Change the default title in *spacemacs* banner."
    (save-excursion
      (goto-char (point-min))
      (search-forward "[S P A C E M A C S]")
      (replace-match "[A N I M A C S]")))

  ;; hooks
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'after-save-hook 'delete-trailing-whitespace)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  (setq custom-file (concat d12/dropbox-path "App/emacs-custom.el"))
  (load custom-file t)

  (if (display-graphic-p)
      (dotspacemacs/init-gui)
    (dotspacemacs/init-terminal)))

(defun dotspacemacs/init-terminal ()
  "Initialization function when `display-graphic-p' returns nil."
  (setq-default dotspacemacs-themes '(apropospriate-dark
                                      spacemacs-dark
                                      spacemacs-light
                                      sanityinc-tomorrow-eighties)))

(defun dotspacemacs/init-gui ()
  "Initialization function when `display-graphic-p' returns t."
  (setq-default dotspacemacs-themes '(apropospriate-light
                                      spacemacs-light
                                      spacemacs-dark
                                      leuven)))

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."

  (add-hook 'find-file-hook 'd12/load-dir-settings)
  (add-hook 'company-mode-hook 'company-quickhelp-mode)
  (add-hook 'prog-mode-hook 'vimish-fold-mode)

  ;; configs
  (helm-projectile-on)
  (delete-selection-mode 1)

  ;; vars
  (setq projectile-enable-caching nil
        magit-repo-dirs '("~/Developer/")
        google-translate-default-source-language "Ukrainian"
        google-translate-default-target-language "English"
        git-messenger:show-detail t
        haskell-process-suggest-remove-import-lines nil
        haskell-process-suggest-hoogle-imports nil)

  ;; key bindings
  (evil-leader/set-key
    "it" 'd12/insert-time
    "id" 'd12/insert-date
    "iD" 'd12/insert-full-date)

  (when (configuration-layer/layer-usedp 'eyebrowse)
    (bind-keys ("M-A-<right>"  . eyebrowse-next-window-config)
               ("M-A-<left>" . eyebrowse-prev-window-config))))

(defun configuration-layer/get-owner (pkg &optional print)
  (interactive "SEnter package name: \np")
  (let ((owner (cdr (assoc pkg
                           (mapcar (lambda (pkg)
                                     (cons (oref pkg :name)
                                           (oref pkg :owner)))
                                   configuration-layer--packages)))))
    (when print
      (message "Owner of %S is %S" pkg owner))
    owner))
